{"version":3,"sources":["Map.js","App.js","reportWebVitals.js","index.js"],"names":["Map","props","access","watchers","useState","mqttData","setMqttData","md5","require","useEffect","idAccess","id","topics","map","watcher","topic","options","clientId","password","username","id_user","connectTimeout","client","mqtt","on","forEach","element","console","log","subscribe","error","message","newData","JSON","parse","toString","find","jdata","imei","imei_md5","replaceAll","res","Object","assign","unsubscribe","end","getLatLon","string","undefined","str","lastIndexOf","substring","slice","split","parseFloat","initialPosition","latlon","InitialMarker","position","wathcerImei","show","keys","data","Marker","animate","Popup","name","phone","datepoint","speedkph","pwr_ext","MapContainer","center","zoom","scrollWheelZoom","style","height","width","TileLayer","url","attribution","d","coord","App","queryString","moment","location","window","search","token","setAccess","setWatchers","a","fetch","method","mode","headers","json","then","fetchData","className","date_to","format","date_from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+YA8KeA,MAvKf,SAAaC,GACT,IAAMC,EAASD,EAAMC,OACfC,EAAWF,EAAME,SACvB,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACIC,EAAMC,EAAQ,KAElBC,qBAAU,WACN,IAAMC,EAAWR,EAAOS,GAClBC,EAAST,EAASU,KAAI,SAAAC,GACxB,MAAM,SAAN,OAAgBA,EAAQC,MAAxB,cAGEC,EAAU,CACZC,SAAUP,EACVQ,SAAUR,EACVS,SAJWjB,EAAOkB,QAKlBC,eAAgB,KAEhBC,EAASC,UAAa,uBAAwBP,GA4BlD,OA3BAM,EAAOE,GAAG,WAAW,WACjBZ,EAAOa,SAAQ,SAAAC,GACXC,QAAQC,IAAR,uBAA4BF,IAC5BJ,EAAOO,UAAUH,SAIzBJ,EAAOE,GAAG,SAAS,SAAUM,GACzBH,QAAQG,MAAMA,MAGlBR,EAAOE,GAAG,WAAW,SAAUT,EAAOgB,GAElC,IAAMC,EAAUC,KAAKC,MAAMH,EAAQI,YAC7BrB,EAAUX,EAASiC,MAAK,SAAAV,GAG1B,OAFWnB,EAAImB,EAAQW,MAAMC,KAAKH,aACvBH,EAAQO,SAASC,WAAW,IAAK,OAGhDR,EAAQlB,QAAUA,EAClB,IAAMwB,EAAON,EAAQO,SACfE,EAAMC,OAAOC,OAAPD,OAAA,IAAAA,CAAA,GACPJ,EAAON,GACT3B,GACHsB,QAAQC,IAAIa,GACZnC,EAAYmC,MAET,WACCnB,IACAV,EAAOa,SAAQ,SAAAC,GACXJ,EAAOsB,YAAYlB,MAEvBJ,EAAOuB,IAAIvB,OAGpB,CAACpB,EAAQC,IAEZ,IAAM2C,EAAY,SAACC,GACf,QAAcC,GAAVD,EAAqB,CACrB,IAAME,EAAMF,EAAOG,YAAY,KAI/B,OAHcH,EAAOI,UAAUF,EAAM,GAAGG,MAAM,GAAI,GAAGC,MAAvC,KAAkDxC,KAAI,SAAAoC,GAChE,OAAOK,WAAWL,MAItB,MAAO,CAAC,SAAU,UAIpBM,EAAkBT,EAAU3C,EAAS,GAAGkC,MAAMmB,QAEpD,SAASC,EAAcxD,GACnB,IAAMa,EAAUb,EAAMa,QAChB4C,EAAWZ,EAAUhC,EAAQuB,MAAMmB,QACnC9B,EAAUZ,EAAQuB,MAClBsB,EAAcpD,EAAIO,EAAQuB,MAAMC,KAAKH,YACvCyB,GAAO,EASX,OAPAlB,OAAOmB,KAAKxD,GAAUoB,SAAQ,SAAAqC,GACfA,EAAKtB,WAAW,IAAK,KACpBmB,IACRC,GAAO,MAIVA,EAID,cAACG,EAAA,EAAD,CACIL,SAAUA,EACVM,SAAS,EAFb,SAII,cAACC,EAAA,EAAD,UACI,+BACI,+BACI,mDADJ,KACiBnD,EAAQoD,OADhBpD,EAAQoD,MAGjB,+BACI,2EADJ,KACqBpD,EAAQqD,QADpBrD,EAAQqD,OAGjB,kEACYzC,EAAQ0C,YADX1C,EAAQ0C,WAGjB,oFACe1C,EAAQ2C,WADd3C,EAAQ2C,UAGjB,kEACY3C,EAAQ4C,UADX5C,EAAQ4C,gBArBtB,6BA+Bf,OACI,eAACC,EAAA,EAAD,CAAcC,OAAQjB,EAAiBkB,KAAM,EAAGC,iBAAiB,EAAMC,MAAO,CAAEC,OAAQ,OAAQC,MAAO,QAAvG,UACI,cAACC,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2EAGZ7E,EAASU,KAAI,SAAAoE,GACT,OAAO,cAACxB,EAAD,CAAe3C,QAASmE,OAInCvC,OAAOmB,KAAKxD,GAAUQ,KAAI,SAAAiD,GACtB,IAAMpC,EAAUrB,EAASyD,GACnBN,EAAS9B,EAAQ8B,OACvB,QAAcR,GAAVQ,EAAqB,CACTA,EAAON,YAAY,KAA/B,IACMgC,EAAQpC,EAAUU,GAExB,OACI,cAACO,EAAA,EAAD,CACIL,SAAUwB,EACVlB,SAAS,EAFb,SAII,cAACC,EAAA,EAAD,UACI,+BACI,+BACI,mDADJ,KACiBvC,EAAQZ,QAAQoD,OADxBxC,EAAQZ,QAAQoD,MAGzB,+BACI,2EADJ,KACqBxC,EAAQZ,QAAQqD,QAD5BzC,EAAQZ,QAAQqD,OAGzB,kEACYzC,EAAQ0C,YADX1C,EAAQ0C,WAGjB,oFACe1C,EAAQ2C,WADd3C,EAAQ2C,UAGjB,kEACY3C,EAAQ4C,UADX5C,EAAQ4C,wBCrE1Ca,MAtFf,WACE,IAAMC,EAAc5E,EAAQ,KACtB6E,EAAS7E,EAAQ,KACjB8E,EAAWC,OAAOD,SAASE,OAE3BC,EADSL,EAAYlD,MAAMoD,GACZG,MAErB,EAA4BrF,mBAAS,IAArC,mBAAOF,EAAP,KAAewF,EAAf,KACA,EAAgCtF,mBAAS,IAAzC,mBAAOD,EAAP,KAAiBwF,EAAjB,KA6CA,OA3CAlF,qBAAU,WAAM,4CACd,sBAAAmF,EAAA,sEACoBC,MAAM,mCACtB,CACEC,OAAQ,OACRC,KAAM,OACNC,QAAS,CACP,MAASP,EACT,8BAA8B,OAPtC,cAWKQ,OACAC,MAAK,SAAAzD,GACJd,QAAQC,IAAIa,GACZkD,EAAYlD,MAdlB,4CADc,uBAAC,WAAD,wBAkBd0D,KACC,CAACV,IAEJhF,qBAAU,WAAM,4CACd,sBAAAmF,EAAA,sEACoBC,MAAM,gCACtB,CACEC,OAAQ,OACRC,KAAM,OACNC,QAAS,CACP,MAASP,EACT,8BAA8B,OAPtC,cAWKQ,OACAC,MAAK,SAAAzD,GACJd,QAAQC,IAAIa,GACZiD,EAAUjD,MAdhB,4CADc,uBAAC,WAAD,wBAkBd0D,KACC,CAACV,IAIF,sBAAKW,UAAU,0CAAf,UACE,sBAAKA,UAAU,0GAAf,UACE,qBAAKA,UAAU,6CAAf,4CACA,qBAAKA,UAAU,aAAf,SAA4B,yBAE1BjG,EAASU,KAAI,SAAAa,GACX,OACE,gCACE,sBAAK0E,UAAU,qBAAf,UAAqC1E,EAAQwC,KAA7C,IAAmD,sBAAMkC,UAAU,gBAAhB,SAAiC1E,EAAQyC,WAC5F,sBAAKiC,UAAU,qBAAf,0BACEf,EAAO3D,EAAQ2E,QAAS,uBAAuBC,OAAO,iBADxD,iBAGEjB,EAAO3D,EAAQ6E,UAAW,uBAAuBD,OAAO,oBAE1D,qBAAKF,UAAU,aAAf,SAA4B,kCAQpC,WACA,QAAkBpD,IAAd9C,EAAOS,SAAoCqC,IAAhB7C,EAAS,GACtC,OAAO,cAAC,EAAD,CAAKsF,MAAOA,EAAOvF,OAAQA,EAAQC,SAAUA,IAFtD,OCtEOqG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.a7c6b111.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\r\nimport 'leaflet/dist/leaflet.css'\r\nimport 'leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.css'\r\nimport \"leaflet-defaulticon-compatibility\";\r\nimport * as mqtt from 'mqtt';\r\n\r\nfunction Map(props) {\r\n    const access = props.access\r\n    const watchers = props.watchers\r\n    const [mqttData, setMqttData] = useState({});\r\n    var md5 = require('md5');\r\n\r\n    useEffect(() => {\r\n        const idAccess = access.id\r\n        const topics = watchers.map(watcher => {\r\n            return `debug/${watcher.topic}/addr/1`\r\n        })\r\n        const idUser = access.id_user\r\n        const options = {\r\n            clientId: idAccess,\r\n            password: idAccess,\r\n            username: idUser,\r\n            connectTimeout: 500,\r\n        }\r\n        var client = mqtt.connect(\"wss://skifgate.ru/ws\", options)\r\n        client.on('connect', function () {\r\n            topics.forEach(element => {\r\n                console.log(`subscribe to ${element}`)\r\n                client.subscribe(element)\r\n            });\r\n        })\r\n\r\n        client.on('error', function (error) {\r\n            console.error(error);\r\n        })\r\n\r\n        client.on('message', function (topic, message) {\r\n            // message is Buffer\r\n            const newData = JSON.parse(message.toString())\r\n            const watcher = watchers.find(element => {\r\n                const wa = md5(element.jdata.imei.toString())\r\n                const we = newData.imei_md5.replaceAll('-', '')\r\n                return wa == we\r\n            })\r\n            newData.watcher = watcher\r\n            const imei = newData.imei_md5\r\n            const res = Object.assign({\r\n                [imei]: newData\r\n            }, mqttData)\r\n            console.log(res)\r\n            setMqttData(res)\r\n        })\r\n        return () => {\r\n            if (client) {\r\n                topics.forEach(element => {\r\n                    client.unsubscribe(element);\r\n                })\r\n                client.end(client);\r\n            }\r\n        };\r\n    }, [access, watchers])\r\n\r\n    const getLatLon = (string) => {\r\n        if (string != undefined) {\r\n            const str = string.lastIndexOf('(')\r\n            const coord = string.substring(str + 1).slice(0, -1).split(` `).map(str => {\r\n                return parseFloat(str)\r\n            })\r\n            return coord\r\n        } else {\r\n            return [40.8054, -74.0241]\r\n        }\r\n    }\r\n\r\n    const initialPosition = getLatLon(watchers[0].jdata.latlon)\r\n\r\n    function InitialMarker(props) {\r\n        const watcher = props.watcher;\r\n        const position = getLatLon(watcher.jdata.latlon)\r\n        const element = watcher.jdata\r\n        const wathcerImei = md5(watcher.jdata.imei.toString())\r\n        var show = true\r\n\r\n        Object.keys(mqttData).forEach(data => {\r\n            var imei = data.replaceAll('-', '')\r\n            if (imei == wathcerImei) {\r\n                show = false\r\n            }\r\n        })\r\n\r\n        if (!show) {\r\n            return <></>\r\n        }\r\n        return (\r\n            <Marker\r\n                position={position}\r\n                animate={false}\r\n            >\r\n                <Popup>\r\n                    <ul>\r\n                        <li key={watcher.name} >\r\n                            <b>Имя</b>: {watcher.name}\r\n                        </li>\r\n                        <li key={watcher.phone} >\r\n                            <b>Телефон</b>: {watcher.phone}\r\n                        </li>\r\n                        <li key={element.datepoint} >\r\n                            Время: {element.datepoint}\r\n                        </li>\r\n                        <li key={element.speedkph}>\r\n                            Скорость: {element.speedkph}\r\n                        </li>\r\n                        <li key={element.pwr_ext}>\r\n                            Заряд: {element.pwr_ext}\r\n                        </li>\r\n                    </ul>\r\n                </Popup>\r\n            </Marker>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <MapContainer center={initialPosition} zoom={5} scrollWheelZoom={true} style={{ height: \"100%\", width: \"100%\" }}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n            />\r\n            {\r\n                watchers.map(d => {\r\n                    return <InitialMarker watcher={d}></InitialMarker>\r\n                })\r\n            }\r\n            {\r\n                Object.keys(mqttData).map(data => {\r\n                    const element = mqttData[data]\r\n                    const latlon = element.latlon\r\n                    if (latlon != undefined) {\r\n                        const str = latlon.lastIndexOf('(')\r\n                        const coord = getLatLon(latlon)\r\n\r\n                        return (\r\n                            <Marker\r\n                                position={coord}\r\n                                animate={false}\r\n                            >\r\n                                <Popup>\r\n                                    <ul>\r\n                                        <li key={element.watcher.name} >\r\n                                            <b>Имя</b>: {element.watcher.name}\r\n                                        </li>\r\n                                        <li key={element.watcher.phone} >\r\n                                            <b>Телефон</b>: {element.watcher.phone}\r\n                                        </li>\r\n                                        <li key={element.datepoint} >\r\n                                            Время: {element.datepoint}\r\n                                        </li>\r\n                                        <li key={element.speedkph}>\r\n                                            Скорость: {element.speedkph}\r\n                                        </li>\r\n                                        <li key={element.pwr_ext}>\r\n                                            Заряд: {element.pwr_ext}\r\n                                        </li>\r\n                                    </ul>\r\n                                </Popup>\r\n                            </Marker>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        </MapContainer>\r\n    )\r\n}\r\nexport default Map;\r\n\r\n","import './App.css';\nimport 'leaflet/dist/leaflet.css'\nimport React, { useEffect, useState } from 'react';\nimport Map from './Map'\n\n// localhost:3000?token=SjHhug\nfunction App() {\n  const queryString = require('query-string');\n  const moment = require('moment');\n  const location = window.location.search\n  const parsed = queryString.parse(location);\n  const token = parsed.token\n\n  const [access, setAccess] = useState({})\n  const [watchers, setWatchers] = useState([])\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(\"https://skifgate.ru/api/watchers\",\n        {\n          method: 'POST',\n          mode: 'cors',\n          headers: {\n            'token': token,\n            'Access-Control-Allow-Origin':'*'\n          }\n        });\n      res\n        .json()\n        .then(res => {\n          console.log(res)\n          setWatchers(res)\n        })\n    }\n    fetchData();\n  }, [token])\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(\"https://skifgate.ru/api/acces\",\n        {\n          method: 'POST',\n          mode: 'cors',\n          headers: {\n            'token': token,\n            'Access-Control-Allow-Origin':'*'\n          }\n        });\n      res\n        .json()\n        .then(res => {\n          console.log(res)\n          setAccess(res)\n        })\n    }\n    fetchData();\n  }, [token])\n\n\n  return (\n    <div className=\"min-h-screen relative flex items-center\">\n      <div className=\"shadow-md border border-black p-6 z-10 bg-white bg-opacity-80 absolute top-0 right-0 flext items-center\">\n        <div className=\"text-xl font-medium text-black text-center\">Метки</div>\n        <div className=\"width-auto\"><hr></hr></div>\n        {\n          watchers.map(element => {\n            return (\n              <div>\n                <div className=\"text-l font-medium\">{element.name} <span className=\"font-semibold\">{element.phone}</span></div>\n                <div className=\"text-l font-medium\">от {\n                  moment(element.date_to, 'YYYY-MM-DDThh:mm:ss').format('DD.MM.YY h:mm')\n                } до {\n                  moment(element.date_from, 'YYYY-MM-DDThh:mm:ss').format('DD.MM.YY h:mm')\n                }</div>\n                <div className=\"width-auto\"><hr></hr></div>\n              </div>\n            )\n          })\n        }\n      </div>\n\n\n      {(() => {\n        if (access.id !== undefined && watchers[0] !== undefined) {\n          return <Map token={token} access={access} watchers={watchers}></Map>\n        }\n      })()}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}