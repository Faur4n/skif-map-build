{"version":3,"sources":["Components/App/Dashboard.js","Components/Mqtt/MqttConnect.js","Components/Helpers/convertToLatLng.js","Components/Helpers/getFormatDate.js","Components/Map/Map.js","Components/App/Content.js","Components/App/useWatchers.js","Components/App/App.js","Components/App/useAccess.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","app","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","appBarSpacer","content","height","overflow","container","paddingBottom","spacing","Dash","props","classes","CssBaseline","className","Container","disableGutters","maxWidth","children","MqttConnect","access","options","clientId","id","password","username","id_user","brokerUrl","convertToLatLng","str","inPeref","substring","lastIndexOf","lon","length","lat","Number","timezone","moment","tz","guess","getFormatDate","date","utc","format","Map","data","console","log","MapContainer","center","zoom","scrollWheelZoom","zoomControl","whenCreated","setMap","TileLayer","url","map","point","watcher","latLng","message","latlon","Marker","position","Popup","name","datepoint","speedkph","pwr_ext","ZoomControl","paper","flexDirection","paddingLeft","paddingTop","fixedHeight","fullHeight","flexContainer","top","right","fixedWidth","card","cardDetails","flex","cardMedia","width","contentEnd","findIndexByProperty","key","value","i","getNormalTopic","topic","firstString","getStringBeforeLastSlash","Content","fixedWidthPaper","clsx","watchers","token","useState","setData","settings","method","headers","Accept","useEffect","a","fetch","fetchResponse","json","fetchApi","useWatchers","connectionStatus","useMqttState","mapData","setMapData","topics","setTopics","useSubscription","initial","filter","jdata","hasOwnProperty","allPoints","averagePosition","average","setView","getZoom","decodeMessage","mess","JSON","parse","decodedMess","topicIndex","messageToSave","tmpWatchers","fixedWatchers","res","watcherIndex","newData","push","Box","List","item","ListItem","CardActionArea","onClick","animate","handleClick","Paper","Typography","component","variant","paragraph","date_from","date_to","Loading","App","require","window","location","search","useAccess","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70ea8bb0.chunk.js","sourcesContent":["import CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles((theme) => ({\n    app: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 24, // keep right padding when drawer closed\n    },\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingBottom: theme.spacing(4),\n        height: 100\n    }\n}));\n\n\nexport default function Dash(props) {\n    const classes = useStyles();\n  \n    return (\n        <div>\n            <CssBaseline />\n            <main className={classes.content}>\n                <Container disableGutters={true}  maxWidth={false} className={classes.container}>\n                    {props.children}\n                </Container>\n            </main>\n        </div>\n    )\n}","import React from 'react';\nimport { Connector } from 'mqtt-react-hooks';\n\nexport default function MqttConnect(props) {\n    if( props.access){\n        const options = {\n            clientId: props.access.id,\n            password: props.access.id,\n            username: props.access.id_user,\n        }\n        return (\n            <Connector brokerUrl=\"wss://skifgate.ru/ws\" options={options} >\n                {props.children}\n            </Connector>\n        )\n    }else{\n        return(\"Error bad access\")\n    }\n\n}\n","export default function convertToLatLng(str) {\n    const inPeref = str.substring(str.lastIndexOf('(') + 1, str.lastIndexOf(')'));\n    const lon = inPeref.substring(inPeref.lastIndexOf(' '), inPeref.length)\n    const lat = inPeref.substring(0, inPeref.lastIndexOf(' '))\n    return {\n        lat: Number(lat),\n        lon: Number(lon)\n    }\n}\n","import moment from 'moment-timezone';\n\nconst timezone = moment.tz.guess();\n\nexport default function getFormatDate(date) {\n    return moment.utc(date).tz(timezone).format(\"MM.DD.YY, HH:mm\")\n}","import React from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, ZoomControl, useMap } from 'react-leaflet'\nimport convertToLatLng from '../Helpers/convertToLatLng';\nimport getFormatDate from '../Helpers/getFormatDate';\n\nfunction Map(props) {\n    const data = props.data\n    console.log('data');\n    console.log(data);\n    const position = [51.505, -0.09]\n    return (\n        <MapContainer center={position} zoom={13} scrollWheelZoom={false} zoomControl={false} whenCreated={props.setMap} scrollWheelZoom={true}>\n            <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {data.map((point) => {\n                if (point.watcher) {\n                    const latLngString = point.message.latlon\n                    const latLng = convertToLatLng(latLngString)\n                    return (\n                        <Marker position={[latLng.lat, latLng.lon]}>\n                            <Popup>\n                                <strong>Имя:</strong> {point.watcher.name}<br/>\n                                Время: {getFormatDate(point.message.datepoint)}<br/>\n                                Скорость: {point.message.speedkph} км/ч<br/>\n                                Заряд: {point.message.pwr_ext}%<br/>\n                            </Popup>\n                        </Marker>\n                    )\n                }\n            })}\n            <ZoomControl position=\"bottomleft\"/>\n        </MapContainer>\n    )\n}\n\nexport default Map","import React from 'react';\nimport useWatchers from './useWatchers';\nimport Paper from '@material-ui/core/Paper';\nimport Map from '../Map/Map';\nimport { List, ListItem, Box, CardActionArea } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useMqttState, useSubscription } from 'mqtt-react-hooks';\nimport { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport convertToLatLng from '../Helpers/convertToLatLng';\nimport getFormatDate from '../Helpers/getFormatDate';\nimport { average } from 'geolocation-utils';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n        paddingTop: theme.spacing(1)\n    },\n    fixedHeight: {\n        height: \"85vh\",\n    },\n    fullHeight: {\n        height: \"100vh\"\n    },\n    flexContainer: {\n        position: 'fixed',\n        top: 0,\n        right: 0,\n        zIndex: 1000,\n    },\n    fixedWidth: {\n    },\n    card: {\n        display: 'flex',\n    },\n    cardDetails: {\n        flex: 1,\n    },\n    cardMedia: {\n        width: 160,\n    },\n    contentEnd: {\n        justifyContent: 'flex-end'\n    }\n}));\n\nfunction findIndexByProperty(data, key, value) {\n    for (var i = 0; i < data.length; i++) {\n        if (data[i][key] == value) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction getNormalTopic(topic) {\n    const firstString = getStringBeforeLastSlash(topic);\n    return getStringBeforeLastSlash(firstString);\n}\n\nfunction getStringBeforeLastSlash(str) {\n    return str.substring(0, str.lastIndexOf('/'));\n}\n\nexport default function Content(props) {\n    const classes = useStyles();\n    const fixedWidthPaper = clsx(classes.paper, classes.fixedWidth);\n    const watchers = useWatchers(props.token);\n    const { connectionStatus } = useMqttState();\n    const [mapData, setMapData] = useState([]);\n    const [topics, setTopics] = useState([]);\n    const [map, setMap] = useState(null)\n    const { message } = useSubscription(topics);\n\n    useEffect(async () => {\n        if (watchers) {\n            setTopics(\n                watchers.map((watcher) => {\n                    return watcher.topic\n                })\n            );\n            try {\n                const initial = watchers.filter((watcher) => {\n                    if (!watcher.jdata.hasOwnProperty('latlon')) {\n                        return false; // skip\n                    }\n                    return true;\n                }).map((watcher) => {\n                    let initialData = {\n                        topic: getStringBeforeLastSlash(watcher.topic),\n                        message: watcher.jdata,\n                        watcher: watcher\n                    }\n                    return initialData;\n                })\n                setMapData(\n                    initial\n                );\n\n                const allPoints = initial.map((point) => {\n                    const latLngString = point.message.latlon\n                    const latLng = convertToLatLng(latLngString)\n                    return [latLng.lat, latLng.lon]\n                })\n                const averagePosition = average(allPoints)\n                let position\n                if (averagePosition) { position = averagePosition } else { position = [51.505, -0.09] }\n                if (map) {\n                    map.setView(position, map.getZoom());\n                }\n            } catch { }\n        }\n    }, [connectionStatus, watchers, map]);\n\n\n    useEffect(async () => {\n        async function decodeMessage(mess) {\n            const data = await JSON.parse(mess);\n            return data;\n        }\n\n        if (message) {\n            const decodedMess = await decodeMessage(message.message);\n            const topic = getNormalTopic(message.topic)\n            const topicIndex = findIndexByProperty(mapData, 'topic', topic)\n            const messageToSave = { ...message }\n            messageToSave.topic = topic;\n            messageToSave.message = decodedMess;\n            const tmpWatchers = [...watchers]\n            const fixedWatchers = tmpWatchers.map((watcher) => {\n                let res = { ...watcher };\n                res.topic = getStringBeforeLastSlash(watcher.topic);\n                return res\n            })\n            const watcherIndex = findIndexByProperty(fixedWatchers, 'topic', topic);\n            messageToSave.watcher = watchers[watcherIndex];\n            if (messageToSave.watcher) {\n                if (topicIndex > -1) {\n                    const newData = [...mapData]\n                    newData[topicIndex] = messageToSave;\n                    setMapData([...newData]);\n                }\n                else {\n                    const newData = [...mapData]\n                    newData.push(messageToSave);\n                    if (newData.watcher) {\n                        setMapData(newData);\n                    }\n                }\n            }\n        }\n    }, [message, watchers]);\n\n    function handleClick(item) {\n        const latLngString = item.message.latlon;\n        const latLng = convertToLatLng(latLngString);\n        map.setView([latLng.lat, latLng.lon], map.getZoom(), { animate: true });\n    }\n\n    return (\n        <Box>\n            {/* Map */}\n            <Box className={classes.fullHeight}>\n                <Map data={mapData} setMap={setMap} />\n            </Box>\n            <List className={classes.flexContainer} >\n                {/* <ListItem className={classes.contentEnd}>\n                    <Paper className={fixedWidthPaper}>\n                        <h3>{`Status: ${connectionStatus}`}</h3>\n                    </Paper>\n                </ListItem> */}\n                {mapData.map((item) =>\n                    <ListItem className={classes.contentEnd} >\n                        <CardActionArea onClick={() => handleClick(item)}>\n                            <Paper className={fixedWidthPaper}>\n                                <Typography component=\"h2\" variant=\"h5\">\n                                    {item.watcher.name}\n                                </Typography>\n                           \n                                <Typography variant=\"subtitle1\" paragraph>\n                                    от {getFormatDate(item.watcher.date_from)} до {getFormatDate(item.watcher.date_to)}\n                                </Typography>\n                            </Paper>\n                        </CardActionArea>\n                    </ListItem>\n                )}\n            </List>\n        </Box>\n    );\n}","import { useState, useEffect } from 'react';\n\nexport default function useWatchers(token) {\n    const [data, setData] = useState(null)\n    const settings = {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            'token': token\n        }\n    };\n\n    useEffect(() => {\n        async function fetchApi() {\n            try{\n                let fetchResponse = await fetch('/api/watchers', settings)\n                const data = await fetchResponse.json();\n                setData(data)\n            }catch{\n                setData(null)\n            }\n       \n        }\n        fetchApi();\n    }, []);\n\n    return data\n}\n","import './App.css';\nimport React from 'react';\nimport Dash from './Dashboard';\nimport useAccess from './useAccess';\nimport MqttConnect from '../Mqtt/MqttConnect';\nimport Content from './Content';\n\nfunction App() {\n  const queryString = require('query-string');\n  const params = queryString.parse(window.location.search)\n  const token = params.token\n  const access = useAccess(token);\n  if (!token) {\n    return <h1>Error empty token</h1>;\n  }\n  if (!access) {\n    return (<Loading></Loading>);\n  } else {\n    return (\n      <div className=\"App\">\n        <Dash>\n          <MqttConnect access={access}>\n            <Content token={token} />\n          </MqttConnect>\n        </Dash>\n      </div>\n    );\n  }\n}\n\nfunction Loading() {\n  return (\n    <div>\n      Loading...\n    </div>\n  )\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\n\nexport default function useAccess(token) {\n    const [data, setData] = useState(null)\n    const settings = {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            'token':token\n        }\n    };\n\n\n\n    useEffect(() => {   \n        async function fetchApi() {\n            let fetchResponse = await fetch('/api/acces',settings)\n            const data = await fetchResponse.json();\n            setData(data)\n        }\n        if(token)\n            fetchApi();\n    }, []);\n\n    return data\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}